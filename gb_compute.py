import numpy as np
# import symp
import time
from sage.all import QQ
from sage.all import PolynomialRing
from sage.all import ideal


def gb_2states():
    R, [p00, p01, p10, p11, c, v0, v1] = PolynomialRing(QQ, ['p00', 'p01', 'p10', 'p11', 'c', 'v0', 'v1'], order='lex').objgens()
    I = ideal(-11*p00*p10/10 - 2*p00*p11 + 3*p00 + 11*p01*p10/6 - 11*p01*p11/9 + v0*(3*p00*p10/10 + 2*p00*p11/9 - 2*p00/3 - p01*p11/10 - 2*p01/7 - 3*p10/5 - p11/2 + 1),
-11*p00*p10/10 + 5*p00*p11/2 - 6*p01*p10/7 + 4*p01*p11/7 + 3*p10 - 2*p11 + v1*(3*p00*p10/10 + 2*p00*p11/9 - 2*p00/3 - p01*p11/10 - 2*p01/7 - 3*p10/5 - p11/2 + 1),
c*(3*p00*p10/10 + 2*p00*p11/9 - 2*p00/3 - p01*p11/10 - 2*p01/7 - 3*p10/5 - p11/2 + 1) - 1,
p00**2 - p00,
p01**2 - p01,
p00 + p01 - 1,
p10**2 - p10,
p11**2 - p11,
p10 + p11 - 1,)

    start_time = time.time()
    gb_list = I.groebner_basis()
    for gb in gb_list[-2:]:
        print(gb)
        print('=' * 10)

    print('%.4f seconds elapsed' % (time.time() - start_time))



def gb_3states():

    R, [p00, p01, p02, p10, p11, p12, p20, p21, p22, c, v0, v1, v2] = PolynomialRing(QQ, ['p00', 'p01', 'p02', 'p10', 'p11', 'p12', 'p20', 'p21', 'p22', 'c', 'v0', 'v1', 'v2'], order='lex').objgens()
    I = ideal(-2*p00*p10*p20/7 - p00*p10*p21/6 - p00*p10*p22/3 - p00*p10/5 - 26*p00*p11*p20/9 - 2*p00*p11*p21 - 29*p00*p11*p22/10 - 7*p00*p11/6 + 5*p00*p12*p20/9 + 3*p00*p12*p21/7 - 14*p00*p12*p22/9 - 23*p00*p12/10 - 3*p00*p20 - 17*p00*p21/8 + p00*p22/2 + 3*p00 + 2*p01*p10*p20/7 + 2*p01*p10*p21/7 - 5*p01*p10*p22/9 - 3*p01*p10/5 - 25*p01*p11*p20/8 - 3*p01*p11*p21/2 - 13*p01*p11*p22/3 - p01*p11/2 + 9*p01*p12*p20/10 + p01*p12*p21 - 16*p01*p12*p22/7 - 19*p01*p12/8 - 17*p01*p20/4 - 31*p01*p21/10 + 7*p01*p22/10 + 4*p01 + p02*p10*p21/10 - p02*p10*p22/2 - p02*p10/2 - 2*p02*p11*p20 - p02*p11*p21 - 17*p02*p11*p22/6 - p02*p11/3 + p02*p12*p20/2 + 4*p02*p12*p21/9 - 4*p02*p12*p22/3 - 7*p02*p12/4 - 22*p02*p20/9 - 11*p02*p21/7 + p02*p22/3 + 3*p02 + v0*(-p00*p10*p20/10 - p00*p10*p21/10 - p00*p10*p22/7 - p00*p10/8 - p00*p11*p21/6 + p00*p12*p21/9 - 3*p00*p21/10 - p00/10 - p01*p10*p20/7 - p01*p10*p22/5 + 2*p01*p12*p21/9 - 4*p01*p21/9 - p01*p22/10 - p01/10 + p02*p10/10 + p02*p11*p20/5 + p02*p11*p21/10 + 3*p02*p11*p22/10 + p02*p12*p21/8 + p02*p12*p22/10 + p02*p12/4 + p02*p20/7 - 2*p02*p21/9 - 4*p02/9 - p10*p20/8 - p10*p21/10 - p10*p22/4 - p10/6 - 4*p11*p20/9 - p11*p21/5 - 2*p11*p22/3 - p12*p22/5 - 5*p12/9 - p20/3 + 1),
    -11*p00*p10*p20/10 - p00*p10*p21/2 + 2*p00*p10*p22/9 + 8*p00*p10/7 + p00*p11*p20/6 + 8*p00*p11*p21/3 + 3*p00*p11*p22/8 + 2*p00*p11/9 - 2*p00*p12*p20/7 + 8*p00*p12*p21/9 + 2*p00*p12*p22/9 + 4*p00*p12/9 - 11*p01*p10*p20/7 - 4*p01*p10*p21/5 + 3*p01*p10*p22/10 + 14*p01*p10/9 + p01*p11*p20/5 + 29*p01*p11*p21/8 + p01*p11*p22/2 + 2*p01*p11/9 - 2*p01*p12*p20/5 + 11*p01*p12*p21/9 + 3*p01*p12*p22/10 + 4*p01*p12/7 - p02*p10*p20/5 + 3*p02*p10*p21/8 + 5*p02*p10/7 + 7*p02*p11*p20/6 + 34*p02*p11*p21/9 + 13*p02*p11/9 - p02*p12*p20/10 + 7*p02*p12*p21/6 + p02*p12*p22/10 + 9*p02*p12/7 - 13*p10*p20/8 - 4*p10*p21/3 + 3*p10*p22/10 + p10 - 19*p11*p20/8 - 13*p11*p21/4 + 6*p11*p22/7 - 3*p11 - p12*p20/3 - 9*p12*p21/10 + p12*p22/4 - 2*p12 + v1*(-p00*p10*p20/10 - p00*p10*p21/10 - p00*p10*p22/7 - p00*p10/8 - p00*p11*p21/6 + p00*p12*p21/9 - 3*p00*p21/10 - p00/10 - p01*p10*p20/7 - p01*p10*p22/5 + 2*p01*p12*p21/9 - 4*p01*p21/9 - p01*p22/10 - p01/10 + p02*p10/10 + p02*p11*p20/5 + p02*p11*p21/10 + 3*p02*p11*p22/10 + p02*p12*p21/8 + p02*p12*p22/10 + p02*p12/4 + p02*p20/7 - 2*p02*p21/9 - 4*p02/9 - p10*p20/8 - p10*p21/10 - p10*p22/4 - p10/6 - 4*p11*p20/9 - p11*p21/5 - 2*p11*p22/3 - p12*p22/5 - 5*p12/9 - p20/3 + 1),
    9*p00*p10*p20/8 + 5*p00*p10*p21/8 + 3*p00*p10*p22/4 + p00*p11*p20/10 - 2*p00*p11*p21/3 + p00*p11*p22/10 + 2*p00*p12*p20/9 - 13*p00*p12*p21/10 + p00*p12*p22/8 + 3*p00*p20/10 + 19*p00*p21/9 + p00*p22/4 + p01*p10*p20 + p01*p10*p21/10 + 9*p01*p10*p22/8 + p01*p11*p20/9 - p01*p11*p21/4 + p01*p11*p22/7 + p01*p12*p20/5 - 10*p01*p12*p21/7 + p01*p12*p22/4 + p01*p20/3 + 11*p01*p21/4 + p01*p22/3 + p02*p10*p20/7 - 3*p02*p10*p21/8 + 4*p02*p10*p22/7 + 5*p02*p11*p20/7 + p02*p11*p21/10 + 8*p02*p11*p22/7 - p02*p12*p20/3 - 16*p02*p12*p21/9 + 11*p02*p12*p22/10 + 2*p02*p20 + 15*p02*p21/4 - p02*p22/6 + 9*p10*p20/7 + p10*p21 + 3*p10*p22/5 - 13*p11*p20/9 - p11*p21/2 - 17*p11*p22/7 + 11*p12*p20/10 + 17*p12*p21/10 - 17*p12*p22/8 - 4*p20 - 4*p21 + p22 + v2*(-p00*p10*p20/10 - p00*p10*p21/10 - p00*p10*p22/7 - p00*p10/8 - p00*p11*p21/6 + p00*p12*p21/9 - 3*p00*p21/10 - p00/10 - p01*p10*p20/7 - p01*p10*p22/5 + 2*p01*p12*p21/9 - 4*p01*p21/9 - p01*p22/10 - p01/10 + p02*p10/10 + p02*p11*p20/5 + p02*p11*p21/10 + 3*p02*p11*p22/10 + p02*p12*p21/8 + p02*p12*p22/10 + p02*p12/4 + p02*p20/7 - 2*p02*p21/9 - 4*p02/9 - p10*p20/8 - p10*p21/10 - p10*p22/4 - p10/6 - 4*p11*p20/9 - p11*p21/5 - 2*p11*p22/3 - p12*p22/5 - 5*p12/9 - p20/3 + 1),
    c*(-p00*p10*p20/10 - p00*p10*p21/10 - p00*p10*p22/7 - p00*p10/8 - p00*p11*p21/6 + p00*p12*p21/9 - 3*p00*p21/10 - p00/10 - p01*p10*p20/7 - p01*p10*p22/5 + 2*p01*p12*p21/9 - 4*p01*p21/9 - p01*p22/10 - p01/10 + p02*p10/10 + p02*p11*p20/5 + p02*p11*p21/10 + 3*p02*p11*p22/10 + p02*p12*p21/8 + p02*p12*p22/10 + p02*p12/4 + p02*p20/7 - 2*p02*p21/9 - 4*p02/9 - p10*p20/8 - p10*p21/10 - p10*p22/4 - p10/6 - 4*p11*p20/9 - p11*p21/5 - 2*p11*p22/3 - p12*p22/5 - 5*p12/9 - p20/3 + 1) - 1,
    p00**2 - p00,
    p01**2 - p01,
    p02**2 - p02,
    p00 + p01 + p02 - 1,
    p10**2 - p10,
    p11**2 - p11,
    p12**2 - p12,
    p10 + p11 + p12 - 1,
    p20**2 - p20,
    p21**2 - p21,
    p22**2 - p22,
    p20 + p21 + p22 - 1,)


    start_time = time.time()
    # print(I.groebner_basis())
    gb_list = I.groebner_basis()
    for gb in gb_list[-3:]:
        print(gb)
        print('='*10)

    print('%.4f seconds elapsed' % (time.time() - start_time))



# def gb_4states():
#     R, [p00, p01, p10, p11, p20, p21, p30, p31, c, v0, v1, v2, v3] = PolynomialRing(QQ,
#                                                                                     ['p00', 'p01', 'p10', 'p11', 'p20',
#                                                                                      'p21', 'p30', 'p31', 'c', 'v0',
#                                                                                      'v1', 'v2', 'v3'],
#                                                                                     order='lex').objgens()
#
#     I = ideal(v0*(p00**4*p10**2/8 + p00**4*p10*p11/10 + p00**4*p10*p31/10 - 3*p00**4*p10/8 - p00**4*p11/8 + 2*p00**4/7 + p00**3*p10**2*p31/10 - 2*p00**3*p10**2/3 - p00**3*p10*p11*p30/6 - p00**3*p10*p11/2 - p00**3*p10*p20/6 - 3*p00**3*p10*p31/10 + 2*p00**3*p10 - p00**3*p11**2*p30/10 - p00**3*p11**2/10 + p00**3*p11*p21/10 + p00**3*p11*p30/4 + 3*p00**3*p11/4 + p00**3*p20/7 + p00**3*p30/10 + p00**3*p31/4 - 3*p00**3/2 - p00**2*p01*p10**2*p21/10 + p00**2*p01*p10*p11/8 + p00**2*p01*p10*p21/5 + p00**2*p01*p10*p31/10 + p00**2*p01*p10/9 + p00**2*p01*p11**2/10 - p00**2*p01*p11/6 - p00**2*p01*p21/6 - p00**2*p01/6 - p00**2*p10**2*p20/10 - p00**2*p10**2*p31/5 + 11*p00**2*p10**2/8 + p00**2*p10*p11*p21/10 + 3*p00**2*p10*p11*p30/8 + p00**2*p10*p11 - p00**2*p10*p20*p30/10 + p00**2*p10*p20*p31/10 + p00**2*p10*p20/3 + p00**2*p10*p21/9 + p00**2*p10*p30/10 + 5*p00**2*p10*p31/8 - 29*p00**2*p10/7 + p00**2*p11**2*p30/7 + p00**2*p11**2/5 - p00**2*p11*p21/10 - p00**2*p11*p30/2 - 14*p00**2*p11/9 - p00**2*p20*p31/10 - p00**2*p20/3 - p00**2*p21/7 - p00**2*p30/6 - p00**2*p31/2 + 28*p00**2/9 + p00*p01*p10**2*p21/10 - p00*p01*p10*p11/5 - p00*p01*p10*p21/4 - p00*p01*p10*p30/10 - p00*p01*p10*p31/10 - p00*p01*p10/6 - p00*p01*p11**2/10 + 2*p00*p01*p11/9 + 2*p00*p01*p21/9 + p00*p01*p30/10 + p00*p01*p31/10 + 2*p00*p01/9 + p00*p10**2*p20/10 + p00*p10**2*p31/6 - 9*p00*p10**2/7 - p00*p10*p11*p21/10 - p00*p10*p11*p30/3 - p00*p10*p11 + p00*p10*p20*p30/10 - p00*p10*p20*p31/10 - p00*p10*p20/3 - p00*p10*p21/6 - p00*p10*p30/10 - 4*p00*p10*p31/7 + 23*p00*p10/6 - p00*p11**2*p30/8 - p00*p11**2/6 + p00*p11*p21/10 + 4*p00*p11*p30/9 + 13*p00*p11/9 + p00*p20*p31/10 + 3*p00*p20/10 + p00*p21/6 + p00*p30/7 + p00*p31/2 - 23*p00/8 + p01*p10*p11/10 + p01*p10*p21/8 + p01*p10/10 - p01*p11/10 - p01*p21/10 - p01/9 - p10**2*p31/10 + 4*p10**2/9 + p10*p11*p30/8 + p10*p11/3 + p10*p20/9 + p10*p21/10 + p10*p31/5 - 4*p10/3 + p11**2/10 - p11*p30/6 - p11/2 - p20/9 - p21/10 - p30/10 - p31/6 + 1)/(p00**3*p10/4 + p00**3*p11/10 - 3*p00**3/8 - p00**2*p10 - 3*p00**2*p11/8 + 14*p00**2/9 + p00*p01*p11/10 + p00*p01/9 + 13*p00*p10/9 + 5*p00*p11/9 - 13*p00/6 - p01*p11/10 - p01/10 - 2*p10/3 - p11/4 + 1) - (p00**4*p10/8 + p00**4*p11/10 - p00**4*p20/10 - p00**4/9 + p00**3*p01*p10**2*p20/10 - p00**3*p01*p10**2*p31/10 + 5*p00**3*p01*p10**2/7 + p00**3*p01*p10*p11*p20*p30/9 + 2*p00**3*p01*p10*p11*p20/9 + p00**3*p01*p10*p11*p21/7 + p00**3*p01*p10*p11*p30/5 + 4*p00**3*p01*p10*p11/9 - p00**3*p01*p10*p20/3 + 3*p00**3*p01*p10*p31/10 - 2*p00**3*p01*p10 + p00**3*p01*p11**2*p20/10 + p00**3*p01*p11**2/10 - p00**3*p01*p11*p20*p30/7 - p00**3*p01*p11*p20/3 - 2*p00**3*p01*p11*p21/9 - 2*p00**3*p01*p11*p30/9 - 4*p00**3*p01*p11/7 + 3*p00**3*p01*p20/10 + p00**3*p01*p21/9 - p00**3*p01*p30/10 - 2*p00**3*p01*p31/9 + 4*p00**3*p01/3 + p00**2*p01**2*p10**2*p20/10 + 2*p00**2*p01**2*p10**2*p21/9 - p00**2*p01**2*p10**2*p30/5 + 5*p00**2*p01**2*p10**2*p31/7 - 37*p00**2*p01**2*p10**2/8 - p00**2*p01**2*p10*p11*p20*p30/3 - p00**2*p01**2*p10*p11*p20*p31/10 - 5*p00**2*p01**2*p10*p11*p20/7 + p00**2*p01**2*p10*p11*p21*p31/10 - 5*p00**2*p01**2*p10*p11*p21/9 - p00**2*p01**2*p10*p11*p30 - 3*p00**2*p01**2*p10*p11*p31/8 - 5*p00**2*p01**2*p10*p11/3 + p00**2*p01**2*p10*p20*p30/10 - p00**2*p01**2*p10*p20*p31/10 - 3*p00**2*p01**2*p10*p21/10 - p00**2*p01**2*p10*p30/9 - 17*p00**2*p01**2*p10*p31/8 + 75*p00**2*p01**2*p10/7 - p00**2*p01**2*p11**2*p20/10 - p00**2*p01**2*p11**2*p30/8 - p00**2*p01**2*p11**2*p31/10 - p00**2*p01**2*p11**2/10 + 2*p00**2*p01**2*p11*p20*p30/7 + p00**2*p01**2*p11*p20*p31/10 + 5*p00**2*p01**2*p11*p20/8 - p00**2*p01**2*p11*p21*p31/10 + p00**2*p01**2*p11*p21/2 + 9*p00**2*p01**2*p11*p30/10 + p00**2*p01**2*p11*p31/3 + 5*p00**2*p01**2*p11/3 - p00**2*p01**2*p20*p30/10 + p00**2*p01**2*p20*p31/10 + p00**2*p01**2*p20/9 + 2*p00**2*p01**2*p21/9 + 4*p00**2*p01**2*p30/9 + 14*p00**2*p01**2*p31/9 - 6*p00**2*p01**2 + 3*p00*p01**3*p10**2*p20*p30/8 - p00*p01**3*p10**2*p20*p31/3 - 11*p00*p01**3*p10**2*p20/10 - 4*p00*p01**3*p10**2*p21/9 + 9*p00*p01**3*p10**2*p30/10 - 9*p00*p01**3*p10**2*p31/4 + 64*p00*p01**3*p10**2/5 + p00*p01**3*p10*p11*p20*p31/8 + 2*p00*p01**3*p10*p11*p20/3 - p00*p01**3*p10*p11*p21*p30/7 + 4*p00*p01**3*p10*p11*p21/7 + 2*p00*p01**3*p10*p11*p30 + 13*p00*p01**3*p10*p11*p31/10 + 13*p00*p01**3*p10*p11/7 - p00*p01**3*p10*p20*p30/2 + p00*p01**3*p10*p20*p31 + 4*p00*p01**3*p10*p20 - p00*p01**3*p10*p21*p30/8 - p00*p01**3*p10*p21*p31/10 + 11*p00*p01**3*p10*p21/5 + 2*p00*p01**3*p10*p30/9 + 25*p00*p01**3*p10*p31/4 - 251*p00*p01**3*p10/10 - p00*p01**3*p11**2*p20*p30/10 + p00*p01**3*p11**2*p30/10 + p00*p01**3*p11**2*p31/9 + p00*p01**3*p11*p20*p30/10 - p00*p01**3*p11*p20*p31/10 - p00*p01**3*p11*p20/5 + p00*p01**3*p11*p21*p30/7 - p00*p01**3*p11*p21*p31/10 - 2*p00*p01**3*p11*p21/9 - 17*p00*p01**3*p11*p30/10 - 8*p00*p01**3*p11*p31/7 - 3*p00*p01**3*p11/2 + p00*p01**3*p20*p30/10 - 2*p00*p01**3*p20*p31/3 - 25*p00*p01**3*p20/8 + p00*p01**3*p21*p30/10 + p00*p01**3*p21*p31/10 - 17*p00*p01**3*p21/9 - 8*p00*p01**3*p30/7 - 4*p00*p01**3*p31 + 12*p00*p01**3 - 5*p01**4*p10**2*p20*p30/7 + p01**4*p10**2*p20*p31/2 + 12*p01**4*p10**2*p20/7 - p01**4*p10**2*p21*p30/10 + p01**4*p10**2*p21/3 - 7*p01**4*p10**2*p30/6 + 22*p01**4*p10**2*p31/9 - 77*p01**4*p10**2/6 + 7*p01**4*p10*p11*p20*p30/10 - p01**4*p10*p11*p20*p31/9 + 2*p01**4*p10*p11*p20/7 + p01**4*p10*p11*p21*p30/3 - 2*p01**4*p10*p11*p21*p31/9 + p01**4*p10*p11*p21/5 - 10*p01**4*p10*p11*p30/7 - 8*p01**4*p10*p11*p31/5 + p01**4*p10*p11/4 + 5*p01**4*p10*p20*p30/8 - 13*p01**4*p10*p20*p31/9 - 48*p01**4*p10*p20/7 + p01**4*p10*p21*p30/6 + p01**4*p10*p21*p31/10 - 23*p01**4*p10*p21/7 - 2*p01**4*p10*p30/9 - 58*p01**4*p10*p31/9 + 43*p01**4*p10/2 - 4*p01**4*p11*p20*p30/7 + p01**4*p11*p20*p31/10 - p01**4*p11*p20/5 - p01**4*p11*p21*p30/4 + p01**4*p11*p21*p31/5 - p01**4*p11*p21/7 + 11*p01**4*p11*p30/9 + 11*p01**4*p11*p31/8 - 2*p01**4*p11/9 + 7*p01**4*p20*p31/8 + 41*p01**4*p20/9 - p01**4*p21*p30/9 - p01**4*p21*p31/10 + 5*p01**4*p21/2 + p01**4*p30 + 37*p01**4*p31/10 - 9*p01**4)/(p00**3*p10/10 - p00**3/9 - 4*p00**2*p01*p10/5 - p00**2*p01*p11/5 + p00**2*p01 + 3*p00*p01**2*p10 + p00*p01**2*p11/4 - 3*p00*p01**2 - 25*p01**3*p10/7 + 3*p01**3),
# v1*(p00**4*p10**2/8 + p00**4*p10*p11/10 + p00**4*p10*p31/10 - 3*p00**4*p10/8 - p00**4*p11/8 + 2*p00**4/7 + p00**3*p10**2*p31/10 - 2*p00**3*p10**2/3 - p00**3*p10*p11*p30/6 - p00**3*p10*p11/2 - p00**3*p10*p20/6 - 3*p00**3*p10*p31/10 + 2*p00**3*p10 - p00**3*p11**2*p30/10 - p00**3*p11**2/10 + p00**3*p11*p21/10 + p00**3*p11*p30/4 + 3*p00**3*p11/4 + p00**3*p20/7 + p00**3*p30/10 + p00**3*p31/4 - 3*p00**3/2 - p00**2*p01*p10**2*p21/10 + p00**2*p01*p10*p11/8 + p00**2*p01*p10*p21/5 + p00**2*p01*p10*p31/10 + p00**2*p01*p10/9 + p00**2*p01*p11**2/10 - p00**2*p01*p11/6 - p00**2*p01*p21/6 - p00**2*p01/6 - p00**2*p10**2*p20/10 - p00**2*p10**2*p31/5 + 11*p00**2*p10**2/8 + p00**2*p10*p11*p21/10 + 3*p00**2*p10*p11*p30/8 + p00**2*p10*p11 - p00**2*p10*p20*p30/10 + p00**2*p10*p20*p31/10 + p00**2*p10*p20/3 + p00**2*p10*p21/9 + p00**2*p10*p30/10 + 5*p00**2*p10*p31/8 - 29*p00**2*p10/7 + p00**2*p11**2*p30/7 + p00**2*p11**2/5 - p00**2*p11*p21/10 - p00**2*p11*p30/2 - 14*p00**2*p11/9 - p00**2*p20*p31/10 - p00**2*p20/3 - p00**2*p21/7 - p00**2*p30/6 - p00**2*p31/2 + 28*p00**2/9 + p00*p01*p10**2*p21/10 - p00*p01*p10*p11/5 - p00*p01*p10*p21/4 - p00*p01*p10*p30/10 - p00*p01*p10*p31/10 - p00*p01*p10/6 - p00*p01*p11**2/10 + 2*p00*p01*p11/9 + 2*p00*p01*p21/9 + p00*p01*p30/10 + p00*p01*p31/10 + 2*p00*p01/9 + p00*p10**2*p20/10 + p00*p10**2*p31/6 - 9*p00*p10**2/7 - p00*p10*p11*p21/10 - p00*p10*p11*p30/3 - p00*p10*p11 + p00*p10*p20*p30/10 - p00*p10*p20*p31/10 - p00*p10*p20/3 - p00*p10*p21/6 - p00*p10*p30/10 - 4*p00*p10*p31/7 + 23*p00*p10/6 - p00*p11**2*p30/8 - p00*p11**2/6 + p00*p11*p21/10 + 4*p00*p11*p30/9 + 13*p00*p11/9 + p00*p20*p31/10 + 3*p00*p20/10 + p00*p21/6 + p00*p30/7 + p00*p31/2 - 23*p00/8 + p01*p10*p11/10 + p01*p10*p21/8 + p01*p10/10 - p01*p11/10 - p01*p21/10 - p01/9 - p10**2*p31/10 + 4*p10**2/9 + p10*p11*p30/8 + p10*p11/3 + p10*p20/9 + p10*p21/10 + p10*p31/5 - 4*p10/3 + p11**2/10 - p11*p30/6 - p11/2 - p20/9 - p21/10 - p30/10 - p31/6 + 1)/(p00**3*p10/4 + p00**3*p11/10 - 3*p00**3/8 - p00**2*p10 - 3*p00**2*p11/8 + 14*p00**2/9 + p00*p01*p11/10 + p00*p01/9 + 13*p00*p10/9 + 5*p00*p11/9 - 13*p00/6 - p01*p11/10 - p01/10 - 2*p10/3 - p11/4 + 1) - (-p00**4*p10**2*p20*p30/10 + p00**4*p10**2*p20/6 + p00**4*p10**2*p30/7 + 2*p00**4*p10**2*p31/5 - 4*p00**4*p10**2 + p00**4*p10*p11*p20*p30/8 - p00**4*p10*p11*p20*p31/10 - 5*p00**4*p10*p11*p20/6 - p00**4*p10*p11*p21/5 - 3*p00**4*p10*p11*p30/7 - 17*p00**4*p10*p11*p31/10 + 19*p00**4*p10*p11/4 - p00**4*p11**2*p20*p30/10 + 3*p00**4*p11**2*p20/7 + p00**4*p11**2*p21/8 + p00**4*p11**2*p30/5 + 6*p00**4*p11**2*p31/7 - 7*p00**4*p11**2/5 - p00**3*p01*p10**2*p20*p30/10 - p00**3*p01*p10**2*p20*p31/10 + p00**3*p01*p10**2*p20/7 - 5*p00**3*p01*p10**2*p21/8 - p00**3*p01*p10**2*p30/6 - p00**3*p01*p10**2*p31/9 - 7*p00**3*p01*p10**2/5 + p00**3*p01*p10*p11*p20*p30/7 + 2*p00**3*p01*p10*p11*p20*p31/9 + 2*p00**3*p01*p10*p11*p20/9 - p00**3*p01*p10*p11*p21*p31/8 + 3*p00**3*p01*p10*p11*p21/5 - 4*p00**3*p01*p10*p11/7 - p00**3*p01*p11**2*p20*p31/8 - p00**3*p01*p11**2*p20/3 + p00**3*p01*p11**2*p21*p31/10 - p00**3*p01*p11**2*p21/5 - 2*p00**3*p01*p11**2*p31/7 + 4*p00**3*p01*p11**2/5 + 2*p00**3*p10**2*p20*p30/7 - p00**3*p10**2*p20*p31/8 - p00**3*p10**2*p20 - p00**3*p10**2*p21/10 - 5*p00**3*p10**2*p30/6 - 9*p00**3*p10**2*p31/4 + 205*p00**3*p10**2/9 - 3*p00**3*p10*p11*p20*p30/5 + 7*p00**3*p10*p11*p20*p31/10 + 44*p00**3*p10*p11*p20/9 - p00**3*p10*p11*p21*p30/5 + p00**3*p10*p11*p21*p31/7 + 13*p00**3*p10*p11*p21/8 + 22*p00**3*p10*p11*p30/9 + 86*p00**3*p10*p11*p31/9 - 103*p00**3*p10*p11/4 + p00**3*p11**2*p20*p30/4 - p00**3*p11**2*p20*p31/3 - 22*p00**3*p11**2*p20/9 + p00**3*p11**2*p21*p30/10 - p00**3*p11**2*p21*p31/10 - 9*p00**3*p11**2*p21/10 - 9*p00**3*p11**2*p30/8 - 14*p00**3*p11**2*p31/3 + 29*p00**3*p11**2/4 - p00**2*p01**2*p10**2*p21/8 - p00**2*p01**2*p10**2/6 + p00**2*p01**2*p10*p11*p20/10 - 2*p00**2*p01**2*p10*p11/7 + p00**2*p01**2*p11**2*p20/10 - p00**2*p01**2*p11**2/10 + 2*p00**2*p01*p10**2*p20*p30/5 + p00**2*p01*p10**2*p20*p31/3 - 5*p00**2*p01*p10**2*p20/8 - p00**2*p01*p10**2*p21*p30/10 - p00**2*p01*p10**2*p21*p31/8 + 18*p00**2*p01*p10**2*p21/7 + 3*p00**2*p01*p10**2*p30/4 + p00**2*p01*p10**2*p31/2 + 53*p00**2*p01*p10**2/9 - 3*p00**2*p01*p10*p11*p20*p30/5 - 8*p00**2*p01*p10*p11*p20*p31/9 - 6*p00**2*p01*p10*p11*p20/7 + p00**2*p01*p10*p11*p21*p31/2 - 19*p00**2*p01*p10*p11*p21/8 + p00**2*p01*p10*p11*p31/5 + 18*p00**2*p01*p10*p11/7 + p00**2*p01*p11**2*p20*p30/7 + p00**2*p01*p11**2*p20*p31/2 + 13*p00**2*p01*p11**2*p20/9 - 2*p00**2*p01*p11**2*p21*p31/9 + 5*p00**2*p01*p11**2*p21/6 + p00**2*p01*p11**2*p30/10 + 8*p00**2*p01*p11**2*p31/7 - 13*p00**2*p01*p11**2/4 - p00**2*p10**2*p20*p30/2 + 2*p00**2*p10**2*p20*p31/5 + 19*p00**2*p10**2*p20/10 - p00**2*p10**2*p21*p30/10 + 4*p00**2*p10**2*p21/5 + 7*p00**2*p10**2*p30/4 + 43*p00**2*p10**2*p31/9 - 434*p00**2*p10**2/9 + p00**2*p10*p11*p20*p30 - 11*p00**2*p10*p11*p20*p31/6 - 32*p00**2*p10*p11*p20/3 + 4*p00**2*p10*p11*p21*p30/9 - p00**2*p10*p11*p21*p31/10 - 14*p00**2*p10*p11*p21/3 - 16*p00**2*p10*p11*p30/3 - 142*p00**2*p10*p11*p31/7 + 419*p00**2*p10*p11/8 - 2*p00**2*p11**2*p20*p30/5 + 8*p00**2*p11**2*p20*p31/9 + 47*p00**2*p11**2*p20/9 - 2*p00**2*p11**2*p21*p30/9 + 23*p00**2*p11**2*p21/10 + 12*p00**2*p11**2*p30/5 + 77*p00**2*p11**2*p31/8 - 71*p00**2*p11**2/5 + p00*p01**2*p10**2*p20*p30/10 + p00*p01**2*p10**2*p20*p31/10 - p00*p01**2*p10**2*p20/10 + 3*p00*p01**2*p10**2*p21/8 + p00*p01**2*p10**2*p30/9 + p00*p01**2*p10**2*p31/9 + 4*p00*p01**2*p10**2/9 - p00*p01**2*p10*p11*p20*p31/10 - p00*p01**2*p10*p11*p20/4 + p00*p01**2*p10*p11*p21/9 + p00*p01**2*p10*p11*p30/8 + p00*p01**2*p10*p11*p31/10 + 7*p00*p01**2*p10*p11/9 - p00*p01**2*p11**2*p20*p31/10 - p00*p01**2*p11**2*p20/7 - p00*p01**2*p11**2*p21/10 + p00*p01**2*p11**2/4 - 5*p00*p01*p10**2*p20*p30/9 - p00*p01*p10**2*p20*p31/2 + 6*p00*p01*p10**2*p20/7 + p00*p01*p10**2*p21*p30/8 + p00*p01*p10**2*p21*p31/6 - 7*p00*p01*p10**2*p21/2 - p00*p01*p10**2*p30 - 7*p00*p01*p10**2*p31/10 - 58*p00*p01*p10**2/7 + 4*p00*p01*p10*p11*p20*p30/5 + 6*p00*p01*p10*p11*p20*p31/5 + 7*p00*p01*p10*p11*p20/6 - 7*p00*p01*p10*p11*p21*p31/10 + 22*p00*p01*p10*p11*p21/7 - p00*p01*p10*p11*p31/3 - 35*p00*p01*p10*p11/9 - 2*p00*p01*p11**2*p20*p30/9 - 5*p00*p01*p11**2*p20*p31/7 - 2*p00*p01*p11**2*p20 + p00*p01*p11**2*p21*p31/3 - 11*p00*p01*p11**2*p21/9 - p00*p01*p11**2*p30/6 - 13*p00*p01*p11**2*p31/8 + 35*p00*p01*p11**2/8 + 3*p00*p10**2*p20*p30/8 - p00*p10**2*p20*p31/2 - 12*p00*p10**2*p20/7 + p00*p10**2*p21*p30/10 - 7*p00*p10**2*p21/5 - 13*p00*p10**2*p30/8 - 9*p00*p10**2*p31/2 + 363*p00*p10**2/8 - 2*p00*p10*p11*p20*p30/3 + 21*p00*p10*p11*p20*p31/10 + 31*p00*p10*p11*p20/3 - 4*p00*p10*p11*p21*p30/9 - p00*p10*p11*p21*p31/8 + 11*p00*p10*p11*p21/2 + 31*p00*p10*p11*p30/6 + 134*p00*p10*p11*p31/7 - 473*p00*p10*p11/10 + p00*p11**2*p20*p30/4 - p00*p11**2*p20*p31 - 49*p00*p11**2*p20/10 + p00*p11**2*p21*p30/5 + p00*p11**2*p21*p31/10 - 5*p00*p11**2*p21/2 - 9*p00*p11**2*p30/4 - 35*p00*p11**2*p31/4 + 123*p00*p11**2/10 - p01**2*p10**2*p21/4 - p01**2*p10**2*p30/10 - p01**2*p10**2*p31/10 - p01**2*p10**2/3 + p01**2*p10*p11*p20/5 - p01**2*p10*p11*p21/10 - p01**2*p10*p11*p30/10 - 5*p01**2*p10*p11/9 + p01**2*p11**2*p20/10 + p01**2*p11**2*p21/10 - p01**2*p11**2/6 + p01*p10**2*p20*p30/4 + 2*p01*p10**2*p20*p31/9 - 2*p01*p10**2*p20/5 - p01*p10**2*p21*p30/10 - p01*p10**2*p21*p31/10 + 8*p01*p10**2*p21/5 + p01*p10**2*p30/2 + p01*p10**2*p31/3 + 35*p01*p10**2/9 - p01*p10*p11*p20*p30/3 - 5*p01*p10*p11*p20*p31/9 - p01*p10*p11*p20/2 + 3*p01*p10*p11*p21*p31/10 - 7*p01*p10*p11*p21/5 + p01*p10*p11*p31/5 + 19*p01*p10*p11/10 + p01*p11**2*p20*p30/10 + p01*p11**2*p20*p31/3 + 9*p01*p11**2*p20/10 - p01*p11**2*p21*p31/7 + 3*p01*p11**2*p21/5 + p01*p11**2*p30/10 + 7*p01*p11**2*p31/9 - 19*p01*p11**2/10 - p10**2*p20*p30/10 + p10**2*p20*p31/5 + 4*p10**2*p20/7 + 5*p10**2*p21/7 + 4*p10**2*p30/7 + 11*p10**2*p31/7 - 16*p10**2 + p10*p11*p20*p30/7 - 6*p10*p11*p20*p31/7 - 15*p10*p11*p20/4 + p10*p11*p21*p30/6 + p10*p11*p21*p31/9 - 23*p10*p11*p21/10 - 15*p10*p11*p30/8 - 61*p10*p11*p31/9 + 16*p10*p11 + 3*p11**2*p20*p31/8 + 12*p11**2*p20/7 - p11**2*p21*p30/10 + p11**2*p21 + 4*p11**2*p30/5 + 3*p11**2*p31 - 4*p11**2)/(13*p00**3*p10/9 - 6*p00**3*p11/7 + 3*p00**2*p01*p10/10 + 2*p00**2*p01*p11/9 - 61*p00**2*p10/10 + 17*p00**2*p11/5 - 6*p00*p01*p10/7 - 3*p00*p01*p11/5 + 77*p00*p10/9 - 9*p00*p11/2 + 3*p01*p10/5 + 3*p01*p11/7 - 4*p10 + 2*p11),
# v2*(p00**4*p10**2/8 + p00**4*p10*p11/10 + p00**4*p10*p31/10 - 3*p00**4*p10/8 - p00**4*p11/8 + 2*p00**4/7 + p00**3*p10**2*p31/10 - 2*p00**3*p10**2/3 - p00**3*p10*p11*p30/6 - p00**3*p10*p11/2 - p00**3*p10*p20/6 - 3*p00**3*p10*p31/10 + 2*p00**3*p10 - p00**3*p11**2*p30/10 - p00**3*p11**2/10 + p00**3*p11*p21/10 + p00**3*p11*p30/4 + 3*p00**3*p11/4 + p00**3*p20/7 + p00**3*p30/10 + p00**3*p31/4 - 3*p00**3/2 - p00**2*p01*p10**2*p21/10 + p00**2*p01*p10*p11/8 + p00**2*p01*p10*p21/5 + p00**2*p01*p10*p31/10 + p00**2*p01*p10/9 + p00**2*p01*p11**2/10 - p00**2*p01*p11/6 - p00**2*p01*p21/6 - p00**2*p01/6 - p00**2*p10**2*p20/10 - p00**2*p10**2*p31/5 + 11*p00**2*p10**2/8 + p00**2*p10*p11*p21/10 + 3*p00**2*p10*p11*p30/8 + p00**2*p10*p11 - p00**2*p10*p20*p30/10 + p00**2*p10*p20*p31/10 + p00**2*p10*p20/3 + p00**2*p10*p21/9 + p00**2*p10*p30/10 + 5*p00**2*p10*p31/8 - 29*p00**2*p10/7 + p00**2*p11**2*p30/7 + p00**2*p11**2/5 - p00**2*p11*p21/10 - p00**2*p11*p30/2 - 14*p00**2*p11/9 - p00**2*p20*p31/10 - p00**2*p20/3 - p00**2*p21/7 - p00**2*p30/6 - p00**2*p31/2 + 28*p00**2/9 + p00*p01*p10**2*p21/10 - p00*p01*p10*p11/5 - p00*p01*p10*p21/4 - p00*p01*p10*p30/10 - p00*p01*p10*p31/10 - p00*p01*p10/6 - p00*p01*p11**2/10 + 2*p00*p01*p11/9 + 2*p00*p01*p21/9 + p00*p01*p30/10 + p00*p01*p31/10 + 2*p00*p01/9 + p00*p10**2*p20/10 + p00*p10**2*p31/6 - 9*p00*p10**2/7 - p00*p10*p11*p21/10 - p00*p10*p11*p30/3 - p00*p10*p11 + p00*p10*p20*p30/10 - p00*p10*p20*p31/10 - p00*p10*p20/3 - p00*p10*p21/6 - p00*p10*p30/10 - 4*p00*p10*p31/7 + 23*p00*p10/6 - p00*p11**2*p30/8 - p00*p11**2/6 + p00*p11*p21/10 + 4*p00*p11*p30/9 + 13*p00*p11/9 + p00*p20*p31/10 + 3*p00*p20/10 + p00*p21/6 + p00*p30/7 + p00*p31/2 - 23*p00/8 + p01*p10*p11/10 + p01*p10*p21/8 + p01*p10/10 - p01*p11/10 - p01*p21/10 - p01/9 - p10**2*p31/10 + 4*p10**2/9 + p10*p11*p30/8 + p10*p11/3 + p10*p20/9 + p10*p21/10 + p10*p31/5 - 4*p10/3 + p11**2/10 - p11*p30/6 - p11/2 - p20/9 - p21/10 - p30/10 - p31/6 + 1)/(p00**3*p10/4 + p00**3*p11/10 - 3*p00**3/8 - p00**2*p10 - 3*p00**2*p11/8 + 14*p00**2/9 + p00*p01*p11/10 + p00*p01/9 + 13*p00*p10/9 + 5*p00*p11/9 - 13*p00/6 - p01*p11/10 - p01/10 - 2*p10/3 - p11/4 + 1) - (-p00**4*p10**2*p20*p30/10 + p00**4*p10**2*p20/6 - p00**4*p10**2*p21/10 + p00**4*p10*p11*p20*p30/6 + 2*p00**4*p10*p11*p20/5 - p00**4*p10*p11*p21*p31/10 + p00**4*p10*p11*p21/5 + p00**4*p10*p20*p30/7 - p00**4*p10*p20*p31/6 - p00**4*p10*p20 - p00**4*p10*p21/7 + p00**4*p11**2*p20*p30/10 + p00**4*p11**2*p20/8 + p00**4*p11**2*p21/10 - 3*p00**4*p11*p20*p30/10 - p00**4*p11*p20*p31/10 - 7*p00**4*p11*p20/9 - p00**4*p11*p21*p30/10 + p00**4*p11*p21*p31/10 - 3*p00**4*p11*p21/7 + p00**4*p20*p31/7 + 11*p00**4*p20/10 + 2*p00**4*p21/5 + p00**3*p01*p10**2*p20*p31/10 + 2*p00**3*p01*p10**2*p21/7 - p00**3*p01*p10*p11*p20/7 - p00**3*p01*p10*p20*p30/9 - 2*p00**3*p01*p10*p20*p31/9 - p00**3*p01*p10*p20/10 + p00**3*p01*p10*p21*p31/7 - 7*p00**3*p01*p10*p21/10 - p00**3*p01*p11**2*p20/10 - p00**3*p01*p11**2*p21/10 + p00**3*p01*p11*p20/5 + p00**3*p01*p20*p30/8 + p00**3*p01*p20*p31/6 + p00**3*p01*p20/5 - p00**3*p01*p21*p31/10 + 4*p00**3*p01*p21/9 + 5*p00**3*p10**2*p20*p30/9 - 2*p00**3*p10**2*p20*p31/9 - p00**3*p10**2*p20 + p00**3*p10**2*p21*p30/10 - p00**3*p10**2*p21*p31/10 + 3*p00**3*p10**2*p21/8 - 7*p00**3*p10*p11*p20*p30/8 - 2*p00**3*p10*p11*p20*p31/9 - 9*p00**3*p10*p11*p20/4 - p00**3*p10*p11*p21*p30/4 + 3*p00**3*p10*p11*p21*p31/10 - 11*p00**3*p10*p11*p21/10 - 7*p00**3*p10*p20*p30/9 + 9*p00**3*p10*p20*p31/10 + 38*p00**3*p10*p20/7 - p00**3*p10*p21*p30/7 + p00**3*p10*p21*p31/7 + 11*p00**3*p10*p21/10 - 2*p00**3*p11**2*p20*p30/5 - 7*p00**3*p11**2*p20/10 - p00**3*p11**2*p21*p30/10 + p00**3*p11**2*p21*p31/8 - 4*p00**3*p11**2*p21/9 + 5*p00**3*p11*p20*p30/3 + 2*p00**3*p11*p20*p31/5 + 30*p00**3*p11*p20/7 + 2*p00**3*p11*p21*p30/5 - p00**3*p11*p21*p31/2 + 17*p00**3*p11*p21/7 - p00**3*p20*p30/10 - 6*p00**3*p20*p31/7 - 59*p00**3*p20/10 - 17*p00**3*p21/7 - p00**2*p01**2*p10*p21/10 + p00**2*p01**2*p11*p21/10 - p00**2*p01*p10**2*p20*p30/9 - 3*p00**2*p01*p10**2*p20*p31/10 - p00**2*p01*p10**2*p21*p30/9 + p00**2*p01*p10**2*p21*p31/5 - 8*p00**2*p01*p10**2*p21/7 + p00**2*p01*p10*p11*p20*p30/8 + p00**2*p01*p10*p11*p20*p31/10 + 3*p00**2*p01*p10*p11*p20/5 - p00**2*p01*p10*p11*p21*p30/10 - p00**2*p01*p10*p11*p21/8 + 4*p00**2*p01*p10*p20*p30/9 + 9*p00**2*p01*p10*p20*p31/10 + 2*p00**2*p01*p10*p20/5 + p00**2*p01*p10*p21*p30/6 - 5*p00**2*p01*p10*p21*p31/9 + 29*p00**2*p01*p10*p21/10 + p00**2*p01*p11**2*p20*p30/5 + p00**2*p01*p11**2*p20*p31/10 + 3*p00**2*p01*p11**2*p20/8 - p00**2*p01*p11**2*p21*p31/10 + p00**2*p01*p11**2*p21/4 - p00**2*p01*p11*p20*p30/7 - p00**2*p01*p11*p20*p31/8 - 5*p00**2*p01*p11*p20/6 + p00**2*p01*p11*p21*p30/10 - p00**2*p01*p11*p21/9 - p00**2*p01*p20*p30/2 - 3*p00**2*p01*p20*p31/4 - 7*p00**2*p01*p20/8 + 3*p00**2*p01*p21*p31/7 - 2*p00**2*p01*p21 - 7*p00**2*p10**2*p20*p30/6 + p00**2*p10**2*p20*p31/2 + 21*p00**2*p10**2*p20/10 - p00**2*p10**2*p21*p30/6 + p00**2*p10**2*p21*p31/5 - 5*p00**2*p10**2*p21/8 + 9*p00**2*p10*p11*p20*p30/5 + 4*p00**2*p10*p11*p20*p31/9 + 14*p00**2*p10*p11*p20/3 + 5*p00**2*p10*p11*p21*p30/9 - 5*p00**2*p10*p11*p21*p31/8 + 23*p00**2*p10*p11*p21/10 + 14*p00**2*p10*p20*p30/9 - 2*p00**2*p10*p20*p31 - 34*p00**2*p10*p20/3 + 3*p00**2*p10*p21*p30/10 - 2*p00**2*p10*p21*p31/7 - 8*p00**2*p10*p21/3 + 5*p00**2*p11**2*p20*p30/6 + p00**2*p11**2*p20*p31/10 + 13*p00**2*p11**2*p20/9 + 2*p00**2*p11**2*p21*p30/9 - p00**2*p11**2*p21*p31/4 + p00**2*p11**2*p21 - 24*p00**2*p11*p20*p30/7 - 6*p00**2*p11*p20*p31/7 - 89*p00**2*p11*p20/10 - 9*p00**2*p11*p21*p30/10 + p00**2*p11*p21*p31 - 26*p00**2*p11*p21/5 + p00**2*p20*p30/4 + 15*p00**2*p20*p31/8 + 37*p00**2*p20/3 - p00**2*p21*p30/10 + 49*p00**2*p21/9 + p00*p01**2*p10*p11*p21/10 + p00*p01**2*p10*p21/6 - p00*p01**2*p11*p20*p30/10 - p00*p01**2*p11*p20*p31/10 - p00*p01**2*p11*p20/10 - p00*p01**2*p11*p21/7 - p00*p01**2*p20*p31/10 - p00*p01**2*p21/7 + p00*p01*p10**2*p20*p30/6 + 2*p00*p01*p10**2*p20*p31/5 - p00*p01*p10**2*p20/10 + p00*p01*p10**2*p21*p30/6 - p00*p01*p10**2*p21*p31/4 + 8*p00*p01*p10**2*p21/5 - p00*p01*p10*p11*p20*p30/6 - p00*p01*p10*p11*p20*p31/8 - 5*p00*p01*p10*p11*p20/6 + p00*p01*p10*p11*p21*p30/7 + p00*p01*p10*p11*p21/6 - 5*p00*p01*p10*p20*p30/8 - 13*p00*p01*p10*p20*p31/10 - 5*p00*p01*p10*p20/9 - 2*p00*p01*p10*p21*p30/9 + 7*p00*p01*p10*p21*p31/9 - 41*p00*p01*p10*p21/10 - 2*p00*p01*p11**2*p20*p30/7 - p00*p01*p11**2*p20*p31/9 - p00*p01*p11**2*p20/2 + p00*p01*p11**2*p21*p31/10 - p00*p01*p11**2*p21/3 + p00*p01*p11*p20*p30/5 + p00*p01*p11*p20*p31/5 + 8*p00*p01*p11*p20/7 - p00*p01*p11*p21*p30/7 + p00*p01*p11*p21/6 + 7*p00*p01*p20*p30/10 + 11*p00*p01*p20*p31/10 + 11*p00*p01*p20/9 - 3*p00*p01*p21*p31/5 + 25*p00*p01*p21/9 + 11*p00*p10**2*p20*p30/10 - p00*p10**2*p20*p31/2 - 19*p00*p10**2*p20/10 + p00*p10**2*p21*p30/7 - p00*p10**2*p21*p31/6 + 4*p00*p10**2*p21/9 - 5*p00*p10*p11*p20*p30/3 - 3*p00*p10*p11*p20*p31/7 - 30*p00*p10*p11*p20/7 - 5*p00*p10*p11*p21*p30/9 + 4*p00*p10*p11*p21*p31/7 - 20*p00*p10*p11*p21/9 - 7*p00*p10*p20*p30/5 + 19*p00*p10*p20*p31/10 + 95*p00*p10*p20/9 - 2*p00*p10*p21*p30/7 + 2*p00*p10*p21*p31/9 + 26*p00*p10*p21/9 - 7*p00*p11**2*p20*p30/9 - p00*p11**2*p20*p31/10 - 4*p00*p11**2*p20/3 - 2*p00*p11**2*p21*p30/9 + p00*p11**2*p21*p31/4 - 9*p00*p11**2*p21/10 + 22*p00*p11*p20*p30/7 + 4*p00*p11*p20*p31/5 + 74*p00*p11*p20/9 + 7*p00*p11*p21*p30/8 - p00*p11*p21*p31 + 49*p00*p11*p21/10 - 2*p00*p20*p30/7 - 9*p00*p20*p31/5 - 23*p00*p20/2 + p00*p21*p30/10 - 27*p00*p21/5 - p01**2*p10*p11*p21/10 - p01**2*p10*p21/9 + p01**2*p11*p20/10 + p01**2*p11*p21/10 + p01**2*p21/10 - p01*p10**2*p20*p30/10 - p01*p10**2*p20*p31/5 - p01*p10**2*p21*p30/10 + p01*p10**2*p21*p31/8 - 3*p01*p10**2*p21/4 + p01*p10*p11*p20*p30/10 + p01*p10*p11*p20*p31/10 + 3*p01*p10*p11*p20/8 - p01*p10*p11*p21*p30/10 - p01*p10*p11*p21/10 + 3*p01*p10*p20*p30/10 + 3*p01*p10*p20*p31/5 + p01*p10*p20/4 + p01*p10*p21*p30/10 - 3*p01*p10*p21*p31/8 + 17*p01*p10*p21/9 + p01*p11**2*p20*p30/8 + p01*p11**2*p20*p31/10 + 2*p01*p11**2*p20/9 + p01*p11**2*p21/6 - p01*p11*p20*p30/10 - p01*p11*p20*p31/10 - 5*p01*p11*p20/9 + p01*p11*p21*p30/10 - p01*p11*p21/10 - p01*p20*p30/3 - p01*p20*p31/2 - 4*p01*p20/7 + 2*p01*p21*p31/7 - 13*p01*p21/10 - 3*p10**2*p20*p30/8 + p10**2*p20*p31/6 + 2*p10**2*p20/3 - p10**2*p21*p30/10 + p10**2*p21*p31/10 - p10**2*p21/8 + 4*p10*p11*p20*p30/7 + p10*p11*p20*p31/7 + 3*p10*p11*p20/2 + p10*p11*p21*p30/5 - p10*p11*p21*p31/5 + 4*p10*p11*p21/5 + 4*p10*p20*p30/9 - 7*p10*p20*p31/10 - 11*p10*p20/3 + p10*p21*p30/10 - p10*p21*p31/10 - 8*p10*p21/7 + p11**2*p20*p30/4 + 4*p11**2*p20/9 + p11**2*p21*p30/10 - p11**2*p21*p31/10 + p11**2*p21/3 - 11*p11*p20*p30/10 - 2*p11*p20*p31/7 - 17*p11*p20/6 - p11*p21*p30/3 + p11*p21*p31/3 - 16*p11*p21/9 + p20*p30/9 + 2*p20*p31/3 + 4*p20 + 2*p21)/(p00**3*p10/4 + p00**3*p11/10 - 3*p00**3/8 - p00**2*p10 - 3*p00**2*p11/8 + 14*p00**2/9 + p00*p01*p11/10 + p00*p01/9 + 13*p00*p10/9 + 5*p00*p11/9 - 13*p00/6 - p01*p11/10 - p01/10 - 2*p10/3 - p11/4 + 1),
# v3*(p00**4*p10**2/8 + p00**4*p10*p11/10 + p00**4*p10*p31/10 - 3*p00**4*p10/8 - p00**4*p11/8 + 2*p00**4/7 + p00**3*p10**2*p31/10 - 2*p00**3*p10**2/3 - p00**3*p10*p11*p30/6 - p00**3*p10*p11/2 - p00**3*p10*p20/6 - 3*p00**3*p10*p31/10 + 2*p00**3*p10 - p00**3*p11**2*p30/10 - p00**3*p11**2/10 + p00**3*p11*p21/10 + p00**3*p11*p30/4 + 3*p00**3*p11/4 + p00**3*p20/7 + p00**3*p30/10 + p00**3*p31/4 - 3*p00**3/2 - p00**2*p01*p10**2*p21/10 + p00**2*p01*p10*p11/8 + p00**2*p01*p10*p21/5 + p00**2*p01*p10*p31/10 + p00**2*p01*p10/9 + p00**2*p01*p11**2/10 - p00**2*p01*p11/6 - p00**2*p01*p21/6 - p00**2*p01/6 - p00**2*p10**2*p20/10 - p00**2*p10**2*p31/5 + 11*p00**2*p10**2/8 + p00**2*p10*p11*p21/10 + 3*p00**2*p10*p11*p30/8 + p00**2*p10*p11 - p00**2*p10*p20*p30/10 + p00**2*p10*p20*p31/10 + p00**2*p10*p20/3 + p00**2*p10*p21/9 + p00**2*p10*p30/10 + 5*p00**2*p10*p31/8 - 29*p00**2*p10/7 + p00**2*p11**2*p30/7 + p00**2*p11**2/5 - p00**2*p11*p21/10 - p00**2*p11*p30/2 - 14*p00**2*p11/9 - p00**2*p20*p31/10 - p00**2*p20/3 - p00**2*p21/7 - p00**2*p30/6 - p00**2*p31/2 + 28*p00**2/9 + p00*p01*p10**2*p21/10 - p00*p01*p10*p11/5 - p00*p01*p10*p21/4 - p00*p01*p10*p30/10 - p00*p01*p10*p31/10 - p00*p01*p10/6 - p00*p01*p11**2/10 + 2*p00*p01*p11/9 + 2*p00*p01*p21/9 + p00*p01*p30/10 + p00*p01*p31/10 + 2*p00*p01/9 + p00*p10**2*p20/10 + p00*p10**2*p31/6 - 9*p00*p10**2/7 - p00*p10*p11*p21/10 - p00*p10*p11*p30/3 - p00*p10*p11 + p00*p10*p20*p30/10 - p00*p10*p20*p31/10 - p00*p10*p20/3 - p00*p10*p21/6 - p00*p10*p30/10 - 4*p00*p10*p31/7 + 23*p00*p10/6 - p00*p11**2*p30/8 - p00*p11**2/6 + p00*p11*p21/10 + 4*p00*p11*p30/9 + 13*p00*p11/9 + p00*p20*p31/10 + 3*p00*p20/10 + p00*p21/6 + p00*p30/7 + p00*p31/2 - 23*p00/8 + p01*p10*p11/10 + p01*p10*p21/8 + p01*p10/10 - p01*p11/10 - p01*p21/10 - p01/9 - p10**2*p31/10 + 4*p10**2/9 + p10*p11*p30/8 + p10*p11/3 + p10*p20/9 + p10*p21/10 + p10*p31/5 - 4*p10/3 + p11**2/10 - p11*p30/6 - p11/2 - p20/9 - p21/10 - p30/10 - p31/6 + 1)/(p00**3*p10/4 + p00**3*p11/10 - 3*p00**3/8 - p00**2*p10 - 3*p00**2*p11/8 + 14*p00**2/9 + p00*p01*p11/10 + p00*p01/9 + 13*p00*p10/9 + 5*p00*p11/9 - 13*p00/6 - p01*p11/10 - p01/10 - 2*p10/3 - p11/4 + 1) - (-3*p00**4*p10**2*p30/8 + 2*p00**4*p10**2*p31/9 - p00**4*p10*p11*p20*p30/10 + p00**4*p10*p11*p30/6 + 3*p00**4*p10*p11*p31/8 + 3*p00**4*p10*p30/7 - p00**4*p10*p31 + p00**4*p11**2*p30/9 + p00**4*p11**2*p31/9 + p00**4*p11*p20*p30/7 - p00**4*p11*p21*p31/10 - p00**4*p11*p30/2 - 2*p00**4*p11*p31/3 - p00**4*p20*p30/10 + p00**4*p30/5 + p00**4*p31 - p00**3*p01*p10**2*p21*p30/10 + p00**3*p01*p10**2*p30/10 + p00**3*p01*p10**2*p31/5 - p00**3*p01*p10*p11*p31/10 + p00**3*p01*p10*p20*p30/10 + p00**3*p01*p10*p20*p31/8 + p00**3*p01*p10*p21*p30/10 - p00**3*p01*p10*p21*p31/6 - p00**3*p01*p10*p30/4 - 3*p00**3*p01*p10*p31/5 - p00**3*p01*p11**2*p30/10 - p00**3*p01*p11**2*p31/10 + p00**3*p01*p11*p20*p31/10 + p00**3*p01*p11*p30/10 + p00**3*p01*p11*p31/9 - p00**3*p01*p20*p30/9 - p00**3*p01*p20*p31/8 + p00**3*p01*p21*p31/8 + p00**3*p01*p30/4 + 4*p00**3*p01*p31/9 + 2*p00**3*p10**2*p30 - 5*p00**3*p10**2*p31/4 + p00**3*p10*p11*p20*p30/2 + p00**3*p10*p11*p21*p30/6 - p00**3*p10*p11*p21*p31/6 - 7*p00**3*p10*p11*p30/8 - 21*p00**3*p10*p11*p31/10 - p00**3*p10*p20*p30/8 - 20*p00**3*p10*p30/9 + 50*p00**3*p10*p31/9 + p00**3*p11**2*p20*p30/5 + p00**3*p11**2*p21*p30/10 - p00**3*p11**2*p21*p31/10 - 3*p00**3*p11**2*p30/5 - 3*p00**3*p11**2*p31/5 - 5*p00**3*p11*p20*p30/6 + p00**3*p11*p20*p31/10 - 3*p00**3*p11*p21*p30/10 + 3*p00**3*p11*p21*p31/10 + 11*p00**3*p11*p30/4 + 34*p00**3*p11*p31/9 + 2*p00**3*p20*p30/7 + p00**3*p21*p30/10 - p00**3*p21*p31/10 - 6*p00**3*p30/5 - 50*p00**3*p31/9 + p00**2*p01**2*p11*p31/10 + p00**2*p01*p10**2*p20*p31/8 + p00**2*p01*p10**2*p21*p30/4 - p00**2*p01*p10**2*p21*p31/5 - 3*p00**2*p01*p10**2*p30/8 - 7*p00**2*p01*p10**2*p31/8 - p00**2*p01*p10*p11*p20*p30/8 + p00**2*p01*p10*p11*p20*p31/9 + p00**2*p01*p10*p11*p30/10 + p00**2*p01*p10*p11*p31/4 - p00**2*p01*p10*p20*p30/3 - 5*p00**2*p01*p10*p20*p31/9 - 3*p00**2*p01*p10*p21*p30/7 + 2*p00**2*p01*p10*p21*p31/3 + p00**2*p01*p10*p30 + 5*p00**2*p01*p10*p31/2 - p00**2*p01*p11**2*p20*p30/9 - p00**2*p01*p11**2*p21*p30/10 + 3*p00**2*p01*p11**2*p30/10 + p00**2*p01*p11**2*p31/3 + p00**2*p01*p11*p20*p30/10 - 2*p00**2*p01*p11*p20*p31/9 + p00**2*p01*p11*p21*p30/8 + p00**2*p01*p11*p21*p31/10 - 3*p00**2*p01*p11*p30/10 - p00**2*p01*p11*p31/2 + 4*p00**2*p01*p20*p30/9 + 5*p00**2*p01*p20*p31/9 + p00**2*p01*p21*p30/10 - 5*p00**2*p01*p21*p31/9 - p00**2*p01*p30 - 19*p00**2*p01*p31/10 + p00**2*p10**2*p20*p30/10 + p00**2*p10**2*p21*p30/10 - p00**2*p10**2*p21*p31/10 - 29*p00**2*p10**2*p30/7 + 27*p00**2*p10**2*p31/10 - p00**2*p10*p11*p20*p30 + p00**2*p10*p11*p20*p31/6 - 2*p00**2*p10*p11*p21*p30/5 + p00**2*p10*p11*p21*p31/3 + 9*p00**2*p10*p11*p30/5 + 13*p00**2*p10*p11*p31/3 + p00**2*p10*p20*p30/5 + p00**2*p10*p21*p31/10 + 31*p00**2*p10*p30/7 - 119*p00**2*p10*p31/10 - 2*p00**2*p11**2*p20*p30/5 + p00**2*p11**2*p20*p31/10 - p00**2*p11**2*p21*p30/6 + p00**2*p11**2*p21*p31/7 + 5*p00**2*p11**2*p30/4 + 5*p00**2*p11**2*p31/4 + 7*p00**2*p11*p20*p30/4 - 2*p00**2*p11*p20*p31/7 + 5*p00**2*p11*p21*p30/7 - 4*p00**2*p11*p21*p31/7 - 57*p00**2*p11*p30/10 - 8*p00**2*p11*p31 - p00**2*p20*p30/2 + p00**2*p20*p31/10 - 2*p00**2*p21*p30/9 + p00**2*p21*p31/10 + 27*p00**2*p30/10 + 71*p00**2*p31/6 + p00*p01**2*p10*p11*p31/10 + p00*p01**2*p10*p30/10 + p00*p01**2*p10*p31/8 - p00*p01**2*p11*p30/10 - p00*p01**2*p11*p31/7 - p00*p01**2*p30/10 - p00*p01**2*p31/8 - p00*p01*p10**2*p20*p30/10 - p00*p01*p10**2*p20*p31/6 - p00*p01*p10**2*p21*p30/3 + 2*p00*p01*p10**2*p21*p31/7 + p00*p01*p10**2*p30/2 + 11*p00*p01*p10**2*p31/9 + p00*p01*p10*p11*p20*p30/6 - p00*p01*p10*p11*p20*p31/7 + p00*p01*p10*p11*p21*p31/10 - p00*p01*p10*p11*p30/10 - p00*p01*p10*p11*p31/3 + p00*p01*p10*p20*p30/2 + 3*p00*p01*p10*p20*p31/4 + 3*p00*p01*p10*p21*p30/5 - 9*p00*p01*p10*p21*p31/10 - 10*p00*p01*p10*p30/7 - 7*p00*p01*p10*p31/2 + p00*p01*p11**2*p20*p30/7 + p00*p01*p11**2*p21*p30/10 - 3*p00*p01*p11**2*p30/7 - 4*p00*p01*p11**2*p31/9 - p00*p01*p11*p20*p30/9 + 3*p00*p01*p11*p20*p31/10 - p00*p01*p11*p21*p30/6 - p00*p01*p11*p21*p31/9 + 4*p00*p01*p11*p30/9 + 7*p00*p01*p11*p31/10 - 5*p00*p01*p20*p30/8 - 3*p00*p01*p20*p31/4 - p00*p01*p21*p30/8 + 5*p00*p01*p21*p31/7 + 13*p00*p01*p30/9 + 19*p00*p01*p31/7 - p00*p10**2*p20*p30/10 - p00*p10**2*p21*p30/8 + p00*p10**2*p21*p31/9 + 19*p00*p10**2*p30/5 - 13*p00*p10**2*p31/5 + p00*p10*p11*p20*p30 - p00*p10*p11*p20*p31/5 + 3*p00*p10*p11*p21*p30/7 - 3*p00*p10*p11*p21*p31/10 - 13*p00*p10*p11*p30/8 - 41*p00*p10*p11*p31/10 - p00*p10*p20*p30/8 + p00*p10*p20*p31/7 - p00*p10*p21*p31/5 - 39*p00*p10*p30/10 + 91*p00*p10*p31/8 + 3*p00*p11**2*p20*p30/8 - p00*p11**2*p20*p31/10 + p00*p11**2*p21*p30/6 - p00*p11**2*p21*p31/8 - 8*p00*p11**2*p30/7 - 7*p00*p11**2*p31/6 - 8*p00*p11*p20*p30/5 + 3*p00*p11*p20*p31/8 - 3*p00*p11*p21*p30/4 + p00*p11*p21*p31/2 + 21*p00*p11*p30/4 + 15*p00*p11*p31/2 + 2*p00*p20*p30/5 - p00*p20*p31/5 + 2*p00*p21*p30/9 + p00*p21*p31/10 - 27*p00*p30/10 - 45*p00*p31/4 - p01**2*p10*p11*p31/10 - p01**2*p10*p31/10 + p01**2*p11*p30/10 + p01**2*p11*p31/10 + p01**2*p30/10 + p01**2*p31/10 + p01*p10**2*p20*p31/10 + p01*p10**2*p21*p30/6 - p01*p10**2*p21*p31/8 - p01*p10**2*p30/4 - 4*p01*p10**2*p31/7 - p01*p10*p11*p20*p30/10 + p01*p10*p11*p20*p31/10 + p01*p10*p11*p31/6 - 2*p01*p10*p20*p30/9 - p01*p10*p20*p31/3 - 2*p01*p10*p21*p30/7 + 3*p01*p10*p21*p31/7 + 2*p01*p10*p30/3 + 13*p01*p10*p31/8 - p01*p11**2*p20*p30/10 + p01*p11**2*p30/5 + 2*p01*p11**2*p31/9 - p01*p11*p20*p31/7 + p01*p11*p21*p30/10 + p01*p11*p21*p31/10 - 2*p01*p11*p30/9 - p01*p11*p31/3 + 2*p01*p20*p30/7 + p01*p20*p31/3 + p01*p21*p30/10 - p01*p21*p31/3 - 2*p01*p30/3 - 9*p01*p31/7 + p10**2*p21*p30/10 - 13*p10**2*p30/10 + 9*p10**2*p31/10 - p10*p11*p20*p30/3 + p10*p11*p20*p31/10 - p10*p11*p21*p30/6 + p10*p11*p21*p31/10 + 5*p10*p11*p30/9 + 13*p10*p11*p31/9 - p10*p20*p31/10 + p10*p21*p31/9 + 13*p10*p30/10 - 41*p10*p31/10 - p11**2*p20*p30/8 - p11**2*p21*p30/10 + 2*p11**2*p30/5 + 2*p11**2*p31/5 + 5*p11*p20*p30/9 - p11*p20*p31/6 + 3*p11*p21*p30/10 - p11*p21*p31/6 - 11*p11*p30/6 - 8*p11*p31/3 - p20*p30/9 + p20*p31/9 - p21*p30/10 - p21*p31/10 + p30 + 4*p31)/(p00**3*p10/4 + p00**3*p11/10 - 3*p00**3/8 - p00**2*p10 - 3*p00**2*p11/8 + 14*p00**2/9 + p00*p01*p11/10 + p00*p01/9 + 13*p00*p10/9 + 5*p00*p11/9 - 13*p00/6 - p01*p11/10 - p01/10 - 2*p10/3 - p11/4 + 1),
# c*(p00**4*p10**2/8 + p00**4*p10*p11/10 + p00**4*p10*p31/10 - 3*p00**4*p10/8 - p00**4*p11/8 + 2*p00**4/7 + p00**3*p10**2*p31/10 - 2*p00**3*p10**2/3 - p00**3*p10*p11*p30/6 - p00**3*p10*p11/2 - p00**3*p10*p20/6 - 3*p00**3*p10*p31/10 + 2*p00**3*p10 - p00**3*p11**2*p30/10 - p00**3*p11**2/10 + p00**3*p11*p21/10 + p00**3*p11*p30/4 + 3*p00**3*p11/4 + p00**3*p20/7 + p00**3*p30/10 + p00**3*p31/4 - 3*p00**3/2 - p00**2*p01*p10**2*p21/10 + p00**2*p01*p10*p11/8 + p00**2*p01*p10*p21/5 + p00**2*p01*p10*p31/10 + p00**2*p01*p10/9 + p00**2*p01*p11**2/10 - p00**2*p01*p11/6 - p00**2*p01*p21/6 - p00**2*p01/6 - p00**2*p10**2*p20/10 - p00**2*p10**2*p31/5 + 11*p00**2*p10**2/8 + p00**2*p10*p11*p21/10 + 3*p00**2*p10*p11*p30/8 + p00**2*p10*p11 - p00**2*p10*p20*p30/10 + p00**2*p10*p20*p31/10 + p00**2*p10*p20/3 + p00**2*p10*p21/9 + p00**2*p10*p30/10 + 5*p00**2*p10*p31/8 - 29*p00**2*p10/7 + p00**2*p11**2*p30/7 + p00**2*p11**2/5 - p00**2*p11*p21/10 - p00**2*p11*p30/2 - 14*p00**2*p11/9 - p00**2*p20*p31/10 - p00**2*p20/3 - p00**2*p21/7 - p00**2*p30/6 - p00**2*p31/2 + 28*p00**2/9 + p00*p01*p10**2*p21/10 - p00*p01*p10*p11/5 - p00*p01*p10*p21/4 - p00*p01*p10*p30/10 - p00*p01*p10*p31/10 - p00*p01*p10/6 - p00*p01*p11**2/10 + 2*p00*p01*p11/9 + 2*p00*p01*p21/9 + p00*p01*p30/10 + p00*p01*p31/10 + 2*p00*p01/9 + p00*p10**2*p20/10 + p00*p10**2*p31/6 - 9*p00*p10**2/7 - p00*p10*p11*p21/10 - p00*p10*p11*p30/3 - p00*p10*p11 + p00*p10*p20*p30/10 - p00*p10*p20*p31/10 - p00*p10*p20/3 - p00*p10*p21/6 - p00*p10*p30/10 - 4*p00*p10*p31/7 + 23*p00*p10/6 - p00*p11**2*p30/8 - p00*p11**2/6 + p00*p11*p21/10 + 4*p00*p11*p30/9 + 13*p00*p11/9 + p00*p20*p31/10 + 3*p00*p20/10 + p00*p21/6 + p00*p30/7 + p00*p31/2 - 23*p00/8 + p01*p10*p11/10 + p01*p10*p21/8 + p01*p10/10 - p01*p11/10 - p01*p21/10 - p01/9 - p10**2*p31/10 + 4*p10**2/9 + p10*p11*p30/8 + p10*p11/3 + p10*p20/9 + p10*p21/10 + p10*p31/5 - 4*p10/3 + p11**2/10 - p11*p30/6 - p11/2 - p20/9 - p21/10 - p30/10 - p31/6 + 1)/(p00**3*p10/4 + p00**3*p11/10 - 3*p00**3/8 - p00**2*p10 - 3*p00**2*p11/8 + 14*p00**2/9 + p00*p01*p11/10 + p00*p01/9 + 13*p00*p10/9 + 5*p00*p11/9 - 13*p00/6 - p01*p11/10 - p01/10 - 2*p10/3 - p11/4 + 1) - 1,
# p00**2 - p00,
# p01**2 - p01,
# p00 + p01 - 1,
# p10**2 - p10,
# p11**2 - p11,
# p10 + p11 - 1,
# p20**2 - p20,
# p21**2 - p21,
# p20 + p21 - 1,
# p30**2 - p30,
# p31**2 - p31,
# p30 + p31 - 1)
#
#
#     start_time = time.time()
#     # print(I.groebner_basis())
#     gb_list = I.groebner_basis()
#     for gb in gb_list[-3:]:
#         print(gb)
#         print('='*10)
#
#     print('%.4f seconds elapsed' % (time.time() - start_time))



def gb_2state_r_sym():

    R, [p00, p01, p10, p11, c, v0, v1, R00, R01, R10, R11] = PolynomialRing(QQ, ['p00', 'p01', 'p10', 'p11', 'c', 'v0', 'v1', 'R00', 'R01', 'R10', 'R11'], order='lex').objgens()


    I = ideal(441*R00*p00*p10/1000 + 18*R00*p00*p11/125 - R00*p00 + 441*R01*p01*p10/1000 + 18*R01*p01*p11/125 - R01*p01 - 837*R10*p00*p10/1000 - 459*R10*p01*p10/1000 - 837*R11*p00*p11/1000 - 459*R11*p01*p11/1000 + v0*(-891*p00*p10/2500 - 6237*p00*p11/10000 - 63*p00/1000 - 81*p01*p10/5000 - 567*p01*p11/2000 - 441*p01/1000 - 441*p10/1000 - 18*p11/125 + 1),
            -459*R00*p00*p10/1000 - 189*R00*p00*p11/250 - 459*R01*p01*p10/1000 - 189*R01*p01*p11/250 + 63*R10*p00*p10/1000 + 441*R10*p01*p10/1000 - R10*p10 + 63*R11*p00*p11/1000 + 441*R11*p01*p11/1000 - R11*p11 + v1*(-891*p00*p10/2500 - 6237*p00*p11/10000 - 63*p00/1000 - 81*p01*p10/5000 - 567*p01*p11/2000 - 441*p01/1000 - 441*p10/1000 - 18*p11/125 + 1),
            c*(-891*p00*p10/2500 - 6237*p00*p11/10000 - 63*p00/1000 - 81*p01*p10/5000 - 567*p01*p11/2000 - 441*p01/1000 - 441*p10/1000 - 18*p11/125 + 1) - 1,
            p00**2 - p00,
            p01**2 - p01,
            p00 + p01 - 1,
            p10**2 - p10,
            p11**2 - p11,
            p10 + p11 - 1)

    start_time = time.time()
    gb_list = I.groebner_basis()
    # for gb in gb_list[-5:]:
    for gb in gb_list:
        print(gb)
        print('=' * 10)

    print('%.4f seconds elapsed' % (time.time() - start_time))


def gb_2state_2policies():
    R, [d00, d01, d10, d11, c1, c2, y0, y1, p00, p01, p10, p11] = PolynomialRing(QQ, ['d00', 'd01', 'd10', 'd11', 'c1', 'c2', 'y0', 'y1', 'p00', 'p01',
                                                                         'p10', 'p11'], order='lex').objgens()
    I = ideal(-y0**2 - (23*d00*d10/10 + 12*d00*d11/7 - 3*d00 + 3*d01*d10/5 + d01*d11/2 - 2*d01)*(-p00*p10/4 - p00*p11/4 - 3*p00/8 + p01*p10/5 + p01*p11/6 - 6*p01/7 - p10/4 - 2*p11/9 + 1) + (23*p00*p10/10 + 12*p00*p11/7 - 3*p00 + 3*p01*p10/5 + p01*p11/2 - 2*p01)*(-d00*d10/4 - d00*d11/4 - 3*d00/8 + d01*d10/5 + d01*d11/6 - 6*d01/7 - d10/4 - 2*d11/9 + 1),
-y1**2 - (-31*d00*d10/10 - 25*d00*d11/9 - 39*d01*d10/10 - 31*d01*d11/10 + 3*d10 + 2*d11)*(-p00*p10/4 - p00*p11/4 - 3*p00/8 + p01*p10/5 + p01*p11/6 - 6*p01/7 - p10/4 - 2*p11/9 + 1) + (-31*p00*p10/10 - 25*p00*p11/9 - 39*p01*p10/10 - 31*p01*p11/10 + 3*p10 + 2*p11)*(-d00*d10/4 - d00*d11/4 - 3*d00/8 + d01*d10/5 + d01*d11/6 - 6*d01/7 - d10/4 - 2*d11/9 + 1),
c1*(-p00*p10/4 - p00*p11/4 - 3*p00/8 + p01*p10/5 + p01*p11/6 - 6*p01/7 - p10/4 - 2*p11/9 + 1) - 1,
c2*(-d00*d10/4 - d00*d11/4 - 3*d00/8 + d01*d10/5 + d01*d11/6 - 6*d01/7 - d10/4 - 2*d11/9 + 1) - 1,
p00**2 - p00,
p01**2 - p01,
p00 + p01 - 1,
p10**2 - p10,
p11**2 - p11,
p10 + p11 - 1,
d00**2 - d00,
d01**2 - d01,
d00 + d01 - 1,
d10**2 - d10,
d11**2 - d11,
d10 + d11 - 1,)

    start_time = time.time()
    gb_list = I.groebner_basis()

    # for gb in gb_list[-5:]:
    for gb in gb_list:
        print(gb)
        print('=' * 10)

    print('%.4f seconds elapsed' % (time.time() - start_time))


if __name__ == '__main__':
    # gb_2state_2policies()
    gb_2state_r_sym()